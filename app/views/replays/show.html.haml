- title(replay_title(@replay))
- description(replay_description(@replay))

- if user_signed_in? && current_user.admin?
  .admin_panel
    = link_to "Delete", @replay, :method => :delete, :confirm => "Are you sure you want to delete this replay?"
    - if @replay.is_public
      = form_tag [:set_event, @replay], :method => :post do
        = label_tag :event_id, "Event"
        = select_tag :event_id, event_options(params[:event_id] || @replay.event_id)
        = submit_tag "Update"
      
- if @replay.success?
  #replay-tabs
    %ul
      %li
        %a{:href => "#replay-tabs-overall"}= t("replays.tabs.overall")
      %li
        %a{:href => "#replay-tabs-apm"}= t("replays.tabs.apm")
      %li
        %a{:href => "#replay-tabs-chat"}= t("replays.tabs.chat")
    #replay-tabs-overall
      #teams
        - teams(@replay).each do |team, plays|
          .team{:class => winner?(plays) && "winner"}
            - plays.each do |play|
              %span.team-player
                != play_html(play, false)

      .misc
        %span= "#{t("gateway")}: #{@replay.gateway}"
        %br
        %span!= "<b>#{@replay.map_name}</b> #{t("replays.length", :count => @replay.game_length/60)}, #{t(@replay.game_speed.downcase)}<span class=\"at\"> ~ </span><i>#{days_ago(@replay.saved_at)}</i>"
        %br
        %span!= t("sc2_version") + ": " + version_live(@replay)
        - unless @replay.description.blank?
          %br
          %span= t("description") + ": " + @replay.description
        %br
        .container
          = link_to(t("replays.show_winner"), "#", :id => "show-winner", :class => "minibutton")
    #replay-tabs-apm
      %table{:style => "margin: 0 auto; width: 700px;"}
        %tr
          %th= t("players.singular")
          %th= t("match_apm")
          %th= t("average_apm")
        - for play in @replay.plays
          - if play.human?
            %tr
              %td= play.player.name
              %td= play.avg_apm
              %td= Play.where(:player_id => play.player_id).average("avg_apm").round
    
      / :javascript
      /   $(function() {
      /     Highcharts.setOptions({
      /       colors: [#{chart_colors(@replay.plays)}]
      /     });
      / 
      /     new Highcharts.Chart({
      /       chart: {
      /         renderTo: "apm_chart",
      /         defaultSeriesType: 'spline'
      /       },
      /       credits: {
      /         enabled: false
      /       },
      /       title: {
      /         text: "APM"
      /       },
      /       tooltip: {
      /          formatter: function() {
      /                    return '' + this.x + ' minutes (' + this.y + ' APM)';
      /          }
      /       },
      /       plotOptions: {
      /         series: {
      /           marker: {
      /             enabled: false
      /           }
      /         }
      /       },
      /       xAxis: {
      /         title: {
      /           text: "Minutes played"
      /         }
      /       },
      /       yAxis: {
      /         title: {
      /           text: null
      /         },
      /         min: 0
      /       },
      /       series: [
      /           #{@apm_data}
      /       ]
      /     });
      /   });
      / 
      / #apm_chart{ :style => "width: 700px; height: 300px;" }

    #replay-tabs-chat
      %h3= t("replays.message_log")
      #chat
        - @replay.messages.each do |msg|
          %span.chat-msg!= chat_msg_string_pretty(msg, @replay.plays)

- elsif @replay.failed?
  .box.notice
    = t("replays.parse_error")
- else
  .box.notice
    = t("processing")

%br
.span-15
  = link_to t("replays.download"), d_replay_path(@replay, :pass => @replay.pass), :class => "download-button"
  %span#download_url_clippy{:style => "display: none;"}= "http://drop.sc" + replay_path(@replay, :pass => @replay.pass)
  %span#clippy_tooltip_download_url_clippy.clippy-tooltip{:title => t("clippy.copy_link_to_clipboard")}
    != clippy("download_url_clippy")

= render :partial => "shared/share_links"

%br

= render :partial => "shared/comments", :locals => { :commentable => @replay }